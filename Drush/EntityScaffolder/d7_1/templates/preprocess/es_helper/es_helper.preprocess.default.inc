<?php

/**
 * @file
 * Default preprocess functions for entities.
 *
 * WARNING:  Autogenerated code. Manual edits will be lost after autogeneration.
 */

 /**
  * Generic function to extract render array from preprocess variable.
  */
 function es_helper_preprocess_default_extract_rendered_value(&$render_array, $field_name, $cardinality = '1') {
   if ($cardinality === '1') {
     $out = '';
     $render_array[$field_name]['#label_display'] = 'hidden';
     $out = $render_array[$field_name];
   }
   else {
     $out = [];
     $items = [];
     // Extract each values into $items variable.
     if (isset($render_array[$field_name]) && is_array($render_array[$field_name])) {
       // Extract each values into $items variable.
       foreach (element_children($render_array[$field_name]) as $key) {
         $items[] = $render_array[$field_name][$key];
         unset($render_array[$field_name][$key]);
       }
     }
     $weight = 0;
     // At this point `$render_array[$field_name]`
     // is an empty field template.
     foreach ($items as $item) {
       // So we create a render array where each item is rendered as if
       // the field had only item.
       $v = $render_array[$field_name];
       $v['#label_display'] = 'hidden';
       $v['0'] = $item;
       $v['#weight'] = $weight;
       $out[] = $v;
       $weight++;
     }
   }
   return $out;
 }

 /**
  * Generic function to extract render array from preprocess variable for Lists.
  */
 function es_helper_preprocess_default_extract_list_value(&$vars, $field_name, $cardinality = '1') {
   $out = ($cardinality === '1') ? FALSE : [];

   if (!empty($vars[$field_name])) {
     if ($cardinality === '1') {
       $out = isset($vars[$field_name][0]['value']) ? $vars[$field_name][0]['value'] : FALSE;
     }
     else {
       $items = [];
       // Extract each values into $items variable.
       $out = array();
       if(!empty($vars[$field_name])) {
         foreach($vars[$field_name] as $value) {
           $out[] = isset($value['value']) ? $value['value'] : FALSE;
         }
       }
     }
   }
   return $out;
 }

 /**
  * Generic function to extract render array from preprocess variable for CTA.
  */
 function es_helper_preprocess_default_extract_cta_value(&$vars, $field_name, $cardinality = '1') {
   $out = ($cardinality === '1') ? FALSE : [];
   if (!empty($vars[$field_name])) {
     if ($cardinality === '1') {
       $out = _es_helper_preprocess_defualt_get_cta_properties($vars[$field_name][0]);
     }
     else {
       foreach($vars[$field_name] as $value) {
         $out[] = _es_helper_preprocess_defualt_get_cta_properties($value);
       }
     }
   }
   return $out;
 }

 /**
  * Custom function to get cta field properties.
  */
function _es_helper_preprocess_defualt_get_cta_properties($cta_element) {
  $out = FALSE;
  if (!empty($cta_element['title'])) {
    $label = $cta_element['title'];
    if (!empty($cta_element['url'])) {
      $url = !empty($cta_element['url']) ? $cta_element['url'] : '#';
      $options = $cta_element['attributes'];
      $options['absolute'] = TRUE;
      $url = url($url, $options);
    }
    $out = [
      'label' => $label,
      'url' => $url,
    ];
  }
  if (empty($out['label'])) {
    $out = FALSE;
  }
  return $out;
}
